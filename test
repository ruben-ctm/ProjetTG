#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <windows.h>
#include <conio.h>
#include <math.h>

#define MAX_NODES 6
#define MAX_ARCS 9

// Structure pour représenter un arc
typedef struct {
    int id;            // Identifiant de l'arc
    int source;        // Sommet source
    int destination;   // Sommet destination
    float poids;       // Poids de l'arc
} Arcs;

// Structure pour représenter un réseau trophique
typedef struct {
    int id;
    char nom[100];
    char type[100];
    double population;  // Population de l'espèce
    double r;           // Taux de croissance
    double K;           // Capacité de portage
    double N;           // Population actuelle
    double biomasse;    // Biomasse en kg
    double flux_energie; // Flux énergétique en Watts
    double flux_nutriments; // Flux de nutriments supplémentaire
} Noeud;

// Fonction pour afficher les informations d'un sommet
void afficher_sommet(Noeud *noeud) {
    printf("Sommet %d: %s (%s) - Population: %.2f\n", noeud->id, noeud->nom, noeud->type, noeud->N);
}// Fonction pour afficher les arcs
void afficher_arc(Arcs *arc) {
    printf("Arc: %d -> %d avec poids %.2f\n", arc->source, arc->destination, arc->poids);
}

// Fonction pour afficher les successeurs et prédécesseurs d'un sommet
void afficher_adjacence(Noeud *noeuds, Arcs *arcs, int nombre_noeuds, int nombre_arcs) {
    for (int i = 0; i < nombre_noeuds; i++) {
        printf("\nSommet %d: %s\n", noeuds[i].id, noeuds[i].nom);
        printf("Successeurs: ");
        for (int j = 0; j < nombre_arcs; j++) {
            if (arcs[j].source == i) {
                printf("%d ", arcs[j].destination);
            }
        }

        printf("\nPrédécesseurs: ");
        for (int j = 0; j < nombre_arcs; j++) {
            if (arcs[j].destination == i) {
                printf("%d ", arcs[j].source);
            }
        }
        printf("\n");
    }
}

// Fonction pour afficher les espèces avec plusieurs prédateurs
void afficher_especes_avec_multiple_predateurs(Arcs *arcs, int nombre_arcs, Noeud *noeuds, int nombre_noeuds) {
    printf("\nEspèces avec plusieurs prédateurs :\n");
    for (int i = 0; i < nombre_noeuds; i++) {
        int count = 0;
        for (int j = 0; j < nombre_arcs; j++) {
            if (arcs[j].destination == i) {
                count++;
            }
        }
        if (count > 1) {
            printf("%s\n", noeuds[i].nom);
        }
    }
}

// Fonction pour afficher les espèces avec plusieurs sources d'alimentation
void afficher_especes_avec_multiple_sources(Arcs *arcs, int nombre_arcs, Noeud *noeuds, int nombre_noeuds) {
    printf("\nEspèces avec plusieurs sources d'alimentation :\n");
    for (int i = 0; i < nombre_noeuds; i++) {
        int count = 0;
        for (int j = 0; j < nombre_arcs; j++) {
            if (arcs[j].source == i) {
                count++;
            }
        }
        if (count > 1) {
            printf("%s\n", noeuds[i].nom);
        }
    }
}

// Fonction pour afficher les espèces les plus connectées
void afficher_especes_plus_connectees(Arcs *arcs, int nombre_arcs, Noeud *noeuds, int nombre_noeuds) {
    printf("\nEspèces les plus connectées :\n");
    int *degres = (int *)malloc(nombre_noeuds * sizeof(int));
    for (int i = 0; i < nombre_noeuds; i++) {
        degres[i] = 0;
    }

    for (int i = 0; i < nombre_arcs; i++) {
        degres[arcs[i].source]++;
        degres[arcs[i].destination]++;
    }

    int max_degre = 0;
    for (int i = 0; i < nombre_noeuds; i++) {
        if (degres[i] > max_degre) {
            max_degre = degres[i];
        }
    }

    for (int i = 0; i < nombre_noeuds; i++) {
        if (degres[i] == max_degre) {
            printf("%s\n", noeuds[i].nom);
        }
    }

    free(degres);
}

// Fonction pour afficher les espèces avec des prédateurs et des proies
void afficher_especes_avec_predateurs_et_proies(Arcs *arcs, int nombre_arcs, Noeud *noeuds, int nombre_noeuds) {
    printf("\nEspèces avec des prédateurs et des proies :\n");
    for (int i = 0; i < nombre_noeuds; i++) {
        int a_predateur = 0, a_proie = 0;
        for (int j = 0; j < nombre_arcs; j++) {
            if (arcs[j].destination == i) {
                a_predateur = 1;
            }
            if (arcs[j].source == i) {
                a_proie = 1;
            }
        }
        if (a_predateur && a_proie) {
            printf("%s\n", noeuds[i].nom);
        }
    }
}

// Fonction pour afficher les nœuds isolés
void afficher_noeuds_isoles(Arcs *arcs, int nombre_arcs, Noeud *noeuds, int nombre_noeuds) {
    printf("\nNoeuds isolés :");
    int noeuds_isoles_count = 0;
    for (int i = 0; i < nombre_noeuds; i++) {
        int a_predateur = 0, a_proie = 0;
        for (int j = 0; j < nombre_arcs; j++) {
            if (arcs[j].destination == i) {
                a_predateur = 1;
            }
            if (arcs[j].source == i) {
                a_proie = 1;
            }
        }
        if (!a_predateur && !a_proie) {
            printf("%s\n", noeuds[i].nom);
            noeuds_isoles_count++;
        }
    }
    if (noeuds_isoles_count == 0) {
        printf(" 0");
    }
}

// Fonction pour calculer et afficher la complexité du réseau
void afficher_complexite(Noeud *noeuds, Arcs *arcs, int nombre_noeuds, int nombre_arcs) {
    // 1. Nombre d'espèces
    printf("\nNombre d'espèces : %d\n", nombre_noeuds);

    // 2. Hauteur trophique
    int niveaux[nombre_noeuds];
    for (int i = 0; i < nombre_noeuds; i++) {
        niveaux[i] = -1; // Initialisation
    }
    niveaux[0] = 0; // Les producteurs (ID 0) sont au niveau 0
    // Calcul de la hauteur trophique
    for (int i = 0; i < nombre_arcs; i++) {
        int source = arcs[i].source;
        int destination = arcs[i].destination;
        if (niveaux[source] != -1) {
            if (niveaux[destination] < niveaux[source] + 1) {
                niveaux[destination] = niveaux[source] + 1;
            }
        }
    }

    int hauteur_trophique = 0;
    for (int i = 0; i < nombre_noeuds; i++) {
        if (niveaux[i] > hauteur_trophique) {
            hauteur_trophique = niveaux[i];
        }
    }
    printf("Hauteur trophique : %d niveaux\n", hauteur_trophique + 1);

    // 3. Densité de liaison
    float densite = (float)nombre_arcs / (nombre_noeuds * (nombre_noeuds - 1));
    printf("Densité de liaison : %.2f\n\n", densite);

    // 4. Distribution des degrés
    int degres[nombre_noeuds];
    for (int i = 0; i < nombre_noeuds; i++) {
        degres[i] = 0;
    }

    for (int i = 0; i < nombre_arcs; i++) {
        degres[arcs[i].source]++;
        degres[arcs[i].destination]++;
    }

    printf("Distribution des degrés :\n");
    for (int i = 0; i < nombre_noeuds; i++) {
        printf("Sommet %d : Degré %d\n", i, degres[i]);
    }
}

// Fonction DFS pour la vérification de la connexité
void dfs(int sommet, int *visited, int adj[MAX_NODES][MAX_NODES], int nombre_noeuds) {
    visited[sommet] = 1;
    for (int i = 0; i < nombre_noeuds; i++) {
        if (adj[sommet][i] && !visited[i]) {
            dfs(i, visited, adj, nombre_noeuds);
        }
    }
}

// Fonction pour vérifier la connexité faible
int verifier_connexite_faible(Arcs *arcs, int nombre_arcs, int nombre_noeuds) {
    // Matrice d'adjacence non dirigée
    int adj[MAX_NODES][MAX_NODES] = {0};

    // Remplissage de la matrice d'adjacence
    for (int i = 0; i < nombre_arcs; i++) {
        adj[arcs[i].source][arcs[i].destination] = 1;
        adj[arcs[i].destination][arcs[i].source] = 1; // Ignorer la direction
    }

    // Tableau pour marquer les sommets visités
    int visited[MAX_NODES] = {0};

    // Lancer DFS depuis le sommet 0
    dfs(0, visited, adj, nombre_noeuds);

    // Vérifier si tous les sommets ont été visités
    for (int i = 0; i < nombre_noeuds; i++) {
        if (!visited[i]) {
            return 0; // Le graphe n'est pas connexe
        }
    }
    return 1; // Le graphe est connexe
}

// Charger le réseau et initialiser noeud_count et arc_count
void charger_et_afficher_reseau(const char *nom_fichier, Noeud *noeuds, Arcs *arcs, int *noeud_count, int *arc_count) {
    FILE *fichier = fopen(nom_fichier, "r");
    if (!fichier) {
        printf("Erreur lors de l'ouverture du fichier %s\n", nom_fichier);
        return;
    }




oid runge_kutta_2(Noeud *noeuds, Arcs *arcs, int nombre_noeuds, int nombre_arcs, double dt) {
    for (int i = 0; i < nombre_noeuds; i++) {
        double k1 = noeuds[i].r * noeuds[i].N * (1 - noeuds[i].N / noeuds[i].K);
        double k2 = noeuds[i].r * (noeuds[i].N + dt * k1 / 2) * (1 - (noeuds[i].N + dt * k1 / 2) / noeuds[i].K);
        noeuds[i].N += dt * k2;
        if (noeuds[i].N > noeuds[i].K) {
            noeuds[i].N = noeuds[i].K;
        } else if (noeuds[i].N < 0) {
            noeuds[i].N = 0;
        }
    }
}

void appliquer_facteurs_anthropiques(Noeud *noeuds, int nombre_noeuds) {
    for (int i = 0; i < nombre_noeuds; i++) {
        if (strcmp(noeuds[i].type, "Habitat") == 0) {
            noeuds[i].K *= 0.5;  // Exemple : réduire la capacité de portage de 50%
        }
    }
}

void plot_population(Noeud *noeuds, int nombre_noeuds, int iteration) {
    FILE *gnuplot = popen("gnuplot -persistent", "w");
    fprintf(gnuplot, "set terminal png\n");
    fprintf(gnuplot, "set output 'population_%d.png'\n", iteration);
    fprintf(gnuplot, "plot '-' using 1:2 with lines title 'Population'\n");
    for (int i = 0; i < nombre_noeuds; i++) {
        fprintf(gnuplot, "%d %.2f\n", i, noeuds[i].N);
    }
    fprintf(gnuplot, "e\n");
    pclose(gnuplot);
}

void afficher_rapport(Noeud *noeuds, Arcs *arcs, int noeud_count, int arc_count) {
    system("cls");
    printf("\n=== Rapport de Synthèse ===\n");

    // Affichage des sommets et arcs
    printf("\n=== Affichage des sommets et arcs ===\n");
    for (int i = 0; i < noeud_count; i++) {
        afficher_sommet(&noeuds[i]);
    }
    for (int i = 0; i < arc_count; i++) {
        afficher_arc(&arcs[i]);
    }

    // Affichage des successeurs et prédécesseurs
    printf("\n=== Affichage des successeurs et prédécesseurs ===\n");
    for (int i = 0; i < noeud_count; i++) {
        printf("Sommet %d: %s\nSuccesseurs:", noeuds[i].id, noeuds[i].nom);
        for (int j = 0; j < arc_count; j++) {
            if (arcs[j].source == noeuds[i].id) {
                printf(" %d", arcs[j].destination);
            }
        }
        printf("\nPrédécesseurs:");
        for (int j = 0; j < arc_count; j++) {
            if (arcs[j].destination == noeuds[i].id) {
                printf(" %d", arcs[j].source);
            }
        }
        printf("\n");
    }

    // Espèces avec plusieurs prédateurs
    afficher_especes_avec_multiple_predateurs(arcs, arc_count, noeuds, noeud_count);

    // Espèces avec plusieurs sources d'alimentation
    afficher_especes_avec_multiple_sources(arcs, arc_count, noeuds, noeud_count);

    // Espèces les plus connectées
    afficher_especes_plus_connectees(arcs, arc_count, noeuds, noeud_count);

    // Espèces avec des prédateurs et des proies
    afficher_especes_avec_predateurs_et_proies(arcs, arc_count, noeuds, noeud_count);

    // Noeuds isolés
    afficher_noeuds_isoles(arcs, arc_count, noeuds, noeud_count);

    // Complexité du réseau
    afficher_complexite(noeuds, arcs, noeud_count, arc_count);

    // Vérification de la connexité
    int connexe = verifier_connexite_faible(arcs, arc_count, noeud_count);
    printf("\nLe graphe est %sconnexe.\n", connexe ? "" : "non ");

    // Résultats de la simulation
    printf("\n=== Résultats de la Simulation ===\n");
    for (int i = 0; i < noeud_count; i++) {
        printf("Sommet %d: %s (%s) - Population: %.2f\n", noeuds[i].id, noeuds[i].nom, noeuds[i].type, noeuds[i].N);
    }
}

int main() {
    Noeud noeuds[MAX_NODES];
    Arcs arcs[MAX_ARCS];
    int noeud_count = 0, arc_count = 0;  // Initialisation de noeud_count et arc_count

    char choix[256];
    char espece_nom[100];  // Déclare une seule fois l'input pour l'espèce
    int espece_id = -1;     // Déclare une seule fois l'ID de l'espèce
    char nomfichier[256];   // Déclare la variable nomfichier

    while (1) {
        system("cls"); // Clear the screen
        printf("\t\t\t\t\t _______              _     _\n");
        printf("\t\t\t\t\t|__   __|            | |   (_)\n");
        printf("\t\t\t\t\t   | |_ __ ___  _ __ | |__  _  ___\n");
        printf("\t\t\t\t\t   | | '__/ _ \\| '_ \\| '_ \\| |/ __|\n");
        printf("\t\t\t\t\t   | | | | (_) | |_) | | | | | (__\n");
        printf("\t\t\t\t\t _ |_|_|  \\___/| .__/|_| |_|_|\\___|_\n");
        printf("\t\t\t\t\t| \\ | |    | | | |                | |\n");
        printf("\t\t\t\t\t|  \\| | ___| |_|_|     _____  _ __| | _____\n");
        printf("\t\t\t\t\t| . ` |/ _ \\ __\\ \\ /\\ / / _ \\| '__| |/ / __|\n");
        printf("\t\t\t\t\t| |\\  |  __/ |_ \\ V  V / (_) | |  |   <\\__ \\\n");
        printf("\t\t\t\t\t|_| \\_|\\___|\\__| \\_/\\_/ \\___/|_|  |_|\\_\\___/\n\n");

        print_centered("Choisir un réseau trophique:\n\n");
        print_centered("1. Foret temperee");
        print_centered("2. Ocean Arctique");
        print_centered("3. Savane Africaine");
        print_centered("4. Quitter");
        center_cursor();
        fgets(choix, sizeof(choix), stdin);
        choix[strcspn(choix, "\n")] = '\0'; // Retirer le caractère de nouvelle ligne

        if (strcmp(choix, "Foret temperee") == 0) {
            afficher_loading("Loading");
            strcpy(nomfichier, "graphe1.txt");
        } else if (strcmp(choix, "Ocean Arctique") == 0) {
            afficher_loading("Loading");
            strcpy(nomfichier, "graphe2.txt");
        } else if (strcmp(choix, "Savane Africaine") == 0) {
            afficher_loading("Loading");
            strcpy(nomfichier, "graphe3.txt");
        } else if (strcmp(choix, "Quitter") == 0) {
            break;
        } else {
            afficher_loading("Erreur");
            continue;
        }

        charger_et_afficher_reseau(nomfichier, noeuds, arcs, &noeud_count, &arc_count);

        // Demander à l'utilisateur de sélectionner une espèce par son nom
        printf("\nEntrez le nom de l'espèce pour afficher les chaînes alimentaires dont elle dépend : ");
        scanf("%s", espece_nom);

        // Trouver l'ID correspondant au nom entré
        espece_id = -1;
        for (int i = 0; i < noeud_count; i++) {
            if (strcmp(noeuds[i].nom, espece_nom) == 0) {
                espece_id = noeuds[i].id;
                break;
            }
        }

        if (espece_id != -1) {
            afficher_graphe_ascendants(noeuds, arcs, noeud_count, arc_count, espece_id);
            afficher_niveaux_trophiques(noeuds, arcs, noeud_count, arc_count, espece_id);
        } else {
            printf("Espèce \"%s\" introuvable dans le réseau.\n", espece_nom);
        }

        // Demander à l'utilisateur de simuler la disparition d'une espèce
        printf("\nEntrez le nom de l'espèce à simuler pour disparition : ");
        scanf("%s", espece_nom);

        // Trouver l'ID correspondant à l'espèce
        espece_id = -1;
        for (int i = 0; i < noeud_count; i++) {
            if (strcmp(noeuds[i].nom, espece_nom) == 0) {
                espece_id = i;
                break;
            }
        }

        if (espece_id != -1) {
            simuler_disparition(noeuds, arcs, &arc_count, espece_id);
            calculer_degres(noeuds, arcs, noeud_count, arc_count); // Recalcul des degrés
            calculer_centralite_intermediarite(noeuds, arcs, noeud_count, arc_count); // Recalcul de la centralité
        } else {
            printf("Espèce \"%s\" introuvable.\n", espece_nom);
        }
        charger_reseau(nomfichier, noeuds, arcs, &noeud_count, &arc_count);
        simuler_evolution_population(noeuds, arcs, noeud_count, arc_count);
        system("cls");
        afficher_rapport(noeuds, arcs, noeud_count, arc_count);

        while (_getch() != 27); // 27 is the ASCII code for Esc
    }

    return 0;
}











# Nœuds : ID Nom Type r K N
0 Plante Producteur 0.1 5000 2000    # Capacité de portage pour les plantes
1 Lapin Consommateur_primaire 0.4 1000  200  # Lapins consomment des plantes
2 Cerf Consommateur_primaire 0.2 800  50   # Cerfs consomment des plantes
3 Renard Consommateur_secondaire 0.07 300  20   # Renards consomment des lapins et cerfs
4 Loup Consommateur_secondaire 0.05 150  10   # Loups consomment des cerfs et renards
5 Décomposeur Décomposeur 0.3 1000  100  # Décomposeurs recyclent la matière organique

# Arcs : ID Source Destination Poids
0 0 1 1.0  # Plante -> Lapin (Plante nourrit Lapin)
1 0 2 0.8  # Plante -> Cerf (Plante nourrit Cerf)
2 1 3 0.6  # Lapin -> Renard (Lapin nourrit Renard)
3 2 4 0.7  # Cerf -> Loup (Cerf nourrit Loup)
4 3 4 0.5  # Renard -> Loup (Renard nourrit Loup)
5 1 5 0.9  # Lapin -> Décomposeur (Lapin nourrit Décomposeur)
6 2 5 0.7  # Cerf -> Décomposeur (Cerf nourrit Décomposeur)
7 3 5 0.4  # Renard -> Décomposeur (Renard nourrit Décomposeur)
8 4 5 0.3  # Loup -> Décomposeur (Loup nourrit Décomposeur)






# Nœuds : ID Nom Type r K N
0 Arbre Producteur 0.4 300 2000  # Arbres produisent des feuilles pour les insectes
1 Insecte Consommateur_primaire 0.5 250 200  # Insectes consomment des feuilles d'arbres
2 Oiseau Consommateur_secondaire 0.3 120  50   # Oiseaux consomment des insectes
3 Serpent Consommateur_secondaire 0.17 80   20   # Serpents consomment des insectes
4 Rapace Consommateur_tertiaire 0.1 30   10   # Rapaces consomment des oiseaux et serpents
5 Décomposeur Décomposeur 0.4 150 100  # Décomposeurs recyclent les restes des animaux et des plantes

# Arcs : ID Source Destination Poids
0 0 1 1.0  # Arbre -> Insecte (Arbre nourrit Insecte)
1 1 2 0.6  # Insecte -> Oiseau (Insecte nourrit Oiseau)
2 1 3 0.4  # Insecte -> Serpent (Insecte nourrit Serpent)
3 2 4 0.7  # Oiseau -> Rapace (Oiseau nourrit Rapace)
4 3 4 0.5  # Serpent -> Rapace (Serpent nourrit Rapace)
5 1 5 0.8  # Insecte -> Décomposeur (Insecte nourrit Décomposeur)
6 2 5 0.3  # Oiseau -> Décomposeur (Oiseau nourrit Décomposeur)
7 3 5 0.2  # Serpent -> Décomposeur (Serpent nourrit Décomposeur)
8 4 5 0.1  # Rapace -> Décomposeur (Rapace nourrit Décomposeur)






        if (!a_predateur && !a_proie) {
            printf("%s\n", noeuds[i].nom);
            noeuds_isoles_count++;
        }
    }
    if (noeuds_isoles_count == 0) {
        printf(" 0");
    }
}

// Fonction pour calculer et afficher la complexité du réseau
void afficher_complexite(Noeud *noeuds, Arcs *arcs, int nombre_noeuds, int nombre_arcs) {
    // 1. Nombre d'espèces
    printf("\nNombre d'espèces : %d\n", nombre_noeuds);

    // 2. Hauteur trophique
    int niveaux[nombre_noeuds];
    for (int i = 0; i < nombre_noeuds; i++) {
        niveaux[i] = -1; // Initialisation
    }
    niveaux[0] = 0; // Les producteurs (ID 0) sont au niveau 0
    // Calcul de la hauteur trophique
    for (int i = 0; i < nombre_arcs; i++) {
        int source = arcs[i].source;
        int destination = arcs[i].destination;
        if (niveaux[source] != -1) {
            if (niveaux[destination] < niveaux[source] + 1) {
                niveaux[destination] = niveaux[source] + 1;
            }
        }
    }

    int hauteur_trophique = 0;
    for (int i = 0; i < nombre_noeuds; i++) {
        if (niveaux[i] > hauteur_trophique) {
            hauteur_trophique = niveaux[i];
        }
    }
    printf("Hauteur trophique : %d niveaux\n", hauteur_trophique + 1);

    // 3. Densité de liaison
    float densite = (float)nombre_arcs / (nombre_noeuds * (nombre_noeuds - 1));
    printf("Densité de liaison : %.2f\n\n", densite);

    // 4. Distribution des degrés
    int degres[nombre_noeuds];
    for (int i = 0; i < nombre_noeuds; i++) {
        degres[i] = 0;
    }

    for (int i = 0; i < nombre_arcs; i++) {
        degres[arcs[i].source]++;
        degres[arcs[i].destination]++;
    }

    printf("Distribution des degrés :\n");
    for (int i = 0; i < nombre_noeuds; i++) {
        printf("Sommet %d : Degré %d\n", i, degres[i]);
    }
}

// Fonction DFS pour la vérification de la connexité
void dfs(int sommet, int *visited, int adj[MAX_NODES][MAX_NODES], int nombre_noeuds) {
    visited[sommet] = 1;
    for (int i = 0; i < nombre_noeuds; i++) {
        if (adj[sommet][i] && !visited[i]) {
            dfs(i, visited, adj, nombre_noeuds);
        }
    }
}

// Fonction pour vérifier la connexité faible
int verifier_connexite_faible(Arcs *arcs, int nombre_arcs, int nombre_noeuds) {
    // Matrice d'adjacence non dirigée
    int adj[MAX_NODES][MAX_NODES] = {0};

    // Remplissage de la matrice d'adjacence
    for (int i = 0; i < nombre_arcs; i++) {
        adj[arcs[i].source][arcs[i].destination] = 1;
        adj[arcs[i].destination][arcs[i].source] = 1; // Ignorer la direction
    }

    // Tableau pour marquer les sommets visités
    int visited[MAX_NODES] = {0};

    // Lancer DFS depuis le sommet 0
    dfs(0, visited, adj, nombre_noeuds);

    // Vérifier si tous les sommets ont été visités
    for (int i = 0; i < nombre_noeuds; i++) {
        if (!visited[i]) {
            return 0; // Le graphe n'est pas connexe
        }
    }
    return 1; // Le graphe est connexe
}

// Charger le réseau et initialiser noeud_count et arc_count
void charger_et_afficher_reseau(const char *nom_fichier, Noeud *noeuds, Arcs *arcs, int *noeud_count, int *arc_count) {
    FILE *fichier = fopen(nom_fichier, "r");
    if (!fichier) {
        printf("Erreur lors de l'ouverture du fichier %s\n", nom_fichier);
        return;
    }




oid runge_kutta_2(Noeud *noeuds, Arcs *arcs, int nombre_noeuds, int nombre_arcs, double dt) {
    for (int i = 0; i < nombre_noeuds; i++) {
        double k1 = noeuds[i].r * noeuds[i].N * (1 - noeuds[i].N / noeuds[i].K);
        double k2 = noeuds[i].r * (noeuds[i].N + dt * k1 / 2) * (1 - (noeuds[i].N + dt * k1 / 2) / noeuds[i].K);
        noeuds[i].N += dt * k2;
        if (noeuds[i].N > noeuds[i].K) {
            noeuds[i].N = noeuds[i].K;
        } else if (noeuds[i].N < 0) {
            noeuds[i].N = 0;
        }
    }
}

void appliquer_facteurs_anthropiques(Noeud *noeuds, int nombre_noeuds) {
    for (int i = 0; i < nombre_noeuds; i++) {
        if (strcmp(noeuds[i].type, "Habitat") == 0) {
            noeuds[i].K *= 0.5;  // Exemple : réduire la capacité de portage de 50%
        }
    }
}

void plot_population(Noeud *noeuds, int nombre_noeuds, int iteration) {
    FILE *gnuplot = popen("gnuplot -persistent", "w");
    fprintf(gnuplot, "set terminal png\n");
    fprintf(gnuplot, "set output 'population_%d.png'\n", iteration);
    fprintf(gnuplot, "plot '-' using 1:2 with lines title 'Population'\n");
    for (int i = 0; i < nombre_noeuds; i++) {
        fprintf(gnuplot, "%d %.2f\n", i, noeuds[i].N);
    }
    fprintf(gnuplot, "e\n");
    pclose(gnuplot);
}

void afficher_rapport(Noeud *noeuds, Arcs *arcs, int noeud_count, int arc_count) {
    system("cls");
    printf("\n=== Rapport de Synthèse ===\n");

    // Affichage des sommets et arcs
    printf("\n=== Affichage des sommets et arcs ===\n");
    for (int i = 0; i < noeud_count; i++) {
        afficher_sommet(&noeuds[i]);
    }
    for (int i = 0; i < arc_count; i++) {
        afficher_arc(&arcs[i]);
    }

    // Affichage des successeurs et prédécesseurs
    printf("\n=== Affichage des successeurs et prédécesseurs ===\n");
    for (int i = 0; i < noeud_count; i++) {
        printf("Sommet %d: %s\nSuccesseurs:", noeuds[i].id, noeuds[i].nom);
        for (int j = 0; j < arc_count; j++) {
            if (arcs[j].source == noeuds[i].id) {
                printf(" %d", arcs[j].destination);
            }
        }
        printf("\nPrédécesseurs:");
        for (int j = 0; j < arc_count; j++) {
            if (arcs[j].destination == noeuds[i].id) {
                printf(" %d", arcs[j].source);
            }
        }
        printf("\n");
    }

    // Espèces avec plusieurs prédateurs
    afficher_especes_avec_multiple_predateurs(arcs, arc_count, noeuds, noeud_count);

    // Espèces avec plusieurs sources d'alimentation
    afficher_especes_avec_multiple_sources(arcs, arc_count, noeuds, noeud_count);

    // Espèces les plus connectées
    afficher_especes_plus_connectees(arcs, arc_count, noeuds, noeud_count);

    // Espèces avec des prédateurs et des proies
    afficher_especes_avec_predateurs_et_proies(arcs, arc_count, noeuds, noeud_count);

    // Noeuds isolés
    afficher_noeuds_isoles(arcs, arc_count, noeuds, noeud_count);

    // Complexité du réseau
    afficher_complexite(noeuds, arcs, noeud_count, arc_count);

    // Vérification de la connexité
    int connexe = verifier_connexite_faible(arcs, arc_count, noeud_count);
    printf("\nLe graphe est %sconnexe.\n", connexe ? "" : "non ");

    // Résultats de la simulation
    printf("\n=== Résultats de la Simulation ===\n");
    for (int i = 0; i < noeud_count; i++) {
        printf("Sommet %d: %s (%s) - Population: %.2f\n", noeuds[i].id, noeuds[i].nom, noeuds[i].type, noeuds[i].N);
    }
}

int main() {
    Noeud noeuds[MAX_NODES];
    Arcs arcs[MAX_ARCS];
    int noeud_count = 0, arc_count = 0;  // Initialisation de noeud_count et arc_count

    char choix[256];
    char espece_nom[100];  // Déclare une seule fois l'input pour l'espèce
    int espece_id = -1;     // Déclare une seule fois l'ID de l'espèce
    char nomfichier[256];   // Déclare la variable nomfichier

    while (1) {
        system("cls"); // Clear the screen
        printf("\t\t\t\t\t _______              _     _\n");
        printf("\t\t\t\t\t|__   __|            | |   (_)\n");
        printf("\t\t\t\t\t   | |_ __ ___  _ __ | |__  _  ___\n");
        printf("\t\t\t\t\t   | | '__/ _ \\| '_ \\| '_ \\| |/ __|\n");
        printf("\t\t\t\t\t   | | | | (_) | |_) | | | | | (__\n");
        printf("\t\t\t\t\t _ |_|_|  \\___/| .__/|_| |_|_|\\___|_\n");
        printf("\t\t\t\t\t| \\ | |    | | | |                | |\n");
        printf("\t\t\t\t\t|  \\| | ___| |_|_|     _____  _ __| | _____\n");
        printf("\t\t\t\t\t| . ` |/ _ \\ __\\ \\ /\\ / / _ \\| '__| |/ / __|\n");
        printf("\t\t\t\t\t| |\\  |  __/ |_ \\ V  V / (_) | |  |   <\\__ \\\n");
        printf("\t\t\t\t\t|_| \\_|\\___|\\__| \\_/\\_/ \\___/|_|  |_|\\_\\___/\n\n");

        print_centered("Choisir un réseau trophique:\n\n");
        print_centered("1. Foret temperee");
        print_centered("2. Ocean Arctique");
        print_centered("3. Savane Africaine");
        print_centered("4. Quitter");
        center_cursor();
        fgets(choix, sizeof(choix), stdin);
        choix[strcspn(choix, "\n")] = '\0'; // Retirer le caractère de nouvelle ligne

        if (strcmp(choix, "Foret temperee") == 0) {
            afficher_loading("Loading");
            strcpy(nomfichier, "graphe1.txt");
        } else if (strcmp(choix, "Ocean Arctique") == 0) {
            afficher_loading("Loading");
            strcpy(nomfichier, "graphe2.txt");
        } else if (strcmp(choix, "Savane Africaine") == 0) {
            afficher_loading("Loading");
            strcpy(nomfichier, "graphe3.txt");
        } else if (strcmp(choix, "Quitter") == 0) {
            break;
        } else {
            afficher_loading("Erreur");
            continue;
        }

        charger_et_afficher_reseau(nomfichier, noeuds, arcs, &noeud_count, &arc_count);

        // Demander à l'utilisateur de sélectionner une espèce par son nom
        printf("\nEntrez le nom de l'espèce pour afficher les chaînes alimentaires dont elle dépend : ");
        scanf("%s", espece_nom);

        // Trouver l'ID correspondant au nom entré
        espece_id = -1;
        for (int i = 0; i < noeud_count; i++) {
            if (strcmp(noeuds[i].nom, espece_nom) == 0) {
                espece_id = noeuds[i].id;
                break;
            }
        }

        if (espece_id != -1) {
            afficher_graphe_ascendants(noeuds, arcs, noeud_count, arc_count, espece_id);
            afficher_niveaux_trophiques(noeuds, arcs, noeud_count, arc_count, espece_id);
        } else {
            printf("Espèce \"%s\" introuvable dans le réseau.\n", espece_nom);
        }

        // Demander à l'utilisateur de simuler la disparition d'une espèce
        printf("\nEntrez le nom de l'espèce à simuler pour disparition : ");
        scanf("%s", espece_nom);

        // Trouver l'ID correspondant à l'espèce
        espece_id = -1;
        for (int i = 0; i < noeud_count; i++) {
            if (strcmp(noeuds[i].nom, espece_nom) == 0) {
                espece_id = i;
                break;
            }
        }

        if (espece_id != -1) {
            simuler_disparition(noeuds, arcs, &arc_count, espece_id);
            calculer_degres(noeuds, arcs, noeud_count, arc_count); // Recalcul des degrés
            calculer_centralite_intermediarite(noeuds, arcs, noeud_count, arc_count); // Recalcul de la centralité
        } else {
            printf("Espèce \"%s\" introuvable.\n", espece_nom);
        }
        charger_reseau(nomfichier, noeuds, arcs, &noeud_count, &arc_count);
        simuler_evolution_population(noeuds, arcs, noeud_count, arc_count);
        system("cls");
        afficher_rapport(noeuds, arcs, noeud_count, arc_count);

        while (_getch() != 27); // 27 is the ASCII code for Esc
    }

    return 0;
}











# Nœuds : ID Nom Type r K N
0 Plante Producteur 0.1 5000 2000    # Capacité de portage pour les plantes
1 Lapin Consommateur_primaire 0.4 1000  200  # Lapins consomment des plantes
2 Cerf Consommateur_primaire 0.2 800  50   # Cerfs consomment des plantes
3 Renard Consommateur_secondaire 0.07 300  20   # Renards consomment des lapins et cerfs
4 Loup Consommateur_secondaire 0.05 150  10   # Loups consomment des cerfs et renards
5 Décomposeur Décomposeur 0.3 1000  100  # Décomposeurs recyclent la matière organique

# Arcs : ID Source Destination Poids
0 0 1 1.0  # Plante -> Lapin (Plante nourrit Lapin)
1 0 2 0.8  # Plante -> Cerf (Plante nourrit Cerf)
2 1 3 0.6  # Lapin -> Renard (Lapin nourrit Renard)
3 2 4 0.7  # Cerf -> Loup (Cerf nourrit Loup)
4 3 4 0.5  # Renard -> Loup (Renard nourrit Loup)
5 1 5 0.9  # Lapin -> Décomposeur (Lapin nourrit Décomposeur)
6 2 5 0.7  # Cerf -> Décomposeur (Cerf nourrit Décomposeur)
7 3 5 0.4  # Renard -> Décomposeur (Renard nourrit Décomposeur)
8 4 5 0.3  # Loup -> Décomposeur (Loup nourrit Décomposeur)






# Nœuds : ID Nom Type r K N
0 Arbre Producteur 0.4 300 2000  # Arbres produisent des feuilles pour les insectes
1 Insecte Consommateur_primaire 0.5 250 200  # Insectes consomment des feuilles d'arbres
2 Oiseau Consommateur_secondaire 0.3 120  50   # Oiseaux consomment des insectes
3 Serpent Consommateur_secondaire 0.17 80   20   # Serpents consomment des insectes
4 Rapace Consommateur_tertiaire 0.1 30   10   # Rapaces consomment des oiseaux et serpents
5 Décomposeur Décomposeur 0.4 150 100  # Décomposeurs recyclent les restes des animaux et des plantes

# Arcs : ID Source Destination Poids
0 0 1 1.0  # Arbre -> Insecte (Arbre nourrit Insecte)
1 1 2 0.6  # Insecte -> Oiseau (Insecte nourrit Oiseau)
2 1 3 0.4  # Insecte -> Serpent (Insecte nourrit Serpent)
3 2 4 0.7  # Oiseau -> Rapace (Oiseau nourrit Rapace)
4 3 4 0.5  # Serpent -> Rapace (Serpent nourrit Rapace)
5 1 5 0.8  # Insecte -> Décomposeur (Insecte nourrit Décomposeur)
6 2 5 0.3  # Oiseau -> Décomposeur (Oiseau nourrit Décomposeur)
7 3 5 0.2  # Serpent -> Décomposeur (Serpent nourrit Décomposeur)
8 4 5 0.1  # Rapace -> Décomposeur (Rapace nourrit Décomposeur)






